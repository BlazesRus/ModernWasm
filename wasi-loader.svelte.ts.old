/**
 * WASI WASM Loader with Svelte 5 Runes - Pure WASI Implementation
 * 
 * This loader is specifically for WASI-formatted WASM files and does NOT use
 * any Go runtime infrastructure (wasm-exec.js, go-runtime.svelte.ts, etc.)
 * 
 * Uses @wasmer/sdk for proper WASI support in the browser.
 *
 * Copyright (C) 2025 James Armstrong (github.com/BlazesRus)
 * Generated with GitHub Copilot assistance
 *
 * MIT License
 */
import { browser } from '$app/environment';
import { init, Wasmer } from '@wasmer/sdk';
import { addDebugMessage, captureError } from './debugLogger.svelte';

function debugLog(message: string, level: 'info' | 'warn' | 'error' = 'info') {
  addDebugMessage(`🔧 WASI Loader: ${message}`, level);
function debugLog(message: string, level: 'info' | 'warn' | 'error' = 'info') {
  addDebugMessage(`🌐 WASI Loader: ${message}`, level);
}

// Types for WASI WASM module using @wasmer/sdk
export interface WasiModule {
  instance: WebAssembly.Instance;
  exports: WebAssembly.Exports;
  memory: WebAssembly.Memory | null;
  wasmerInstance: any; // Wasmer instance from @wasmer/sdk
}

// Central reactive state for WASI loader
export const wasiLoaderState = $state({
  // Input URL
  url: '' as string,

  // Load flags
  isLoading: false,
  progress: 0,
  error: null as string | null,

  // The WASI module
  wasiModule: null as WasiModule | null,

  // History of progress values for debugging/visualization
  progressHistory: [] as number[],

  // Derived getters - computed on the fly when underlying state changes
  get isReady() {
    return !this.isLoading && this.error === null && !!this.wasiModule;
  },

  get lastProgress() {
    return this.progressHistory.at(-1) ?? 0;
  },

  get hasError() {
    return this.error !== null;
  },

  get hasExports() {
    return !!this.wasiModule && Object.keys(this.wasiModule.exports).length > 0;
  },

  get exports() {
    return this.wasiModule?.exports ?? {};
  },

  get memory() {
    return this.wasiModule?.memory ?? null;
  },

  get wasmerInstance() {
    return this.wasiModule?.wasmerInstance ?? null;
  }
});

/**
 * Load a WASI-formatted WASM file using @wasmer/sdk
 * This is the modern approach for WASI WASM modules
 */
export async function loadWasiWasm(url: string): Promise<boolean> {
  if (!browser) {
    debugLog('Not in browser environment, skipping WASI WASM load', 'warn');
    return false;
  }

  // Reset state
  wasiLoaderState.url = url;
  wasiLoaderState.isLoading = true;
  wasiLoaderState.progress = 0;
  wasiLoaderState.error = null;
  wasiLoaderState.progressHistory = [];
  wasiLoaderState.wasiModule = null;

  // Progress tracking function
  const updateProgress = (progress: number) => {
    wasiLoaderState.progress = progress;
    wasiLoaderState.progressHistory = [...wasiLoaderState.progressHistory, progress];

    // Trim history if it gets too long
    if (wasiLoaderState.progressHistory.length > 20) {
      wasiLoaderState.progressHistory = wasiLoaderState.progressHistory.slice(-20);
    }
  };

  try {
    debugLog(`Starting WASI WASM load from ${url}`, 'info');

    // Step 1: Initialize Wasmer SDK
    updateProgress(10);
    await init();
    debugLog('Wasmer SDK initialized', 'info');

    // Step 2: Fetch the WASM file
    updateProgress(20);
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch WASM file: ${response.status} ${response.statusText}`);
    }

    // Step 3: Get the WASM bytes
    updateProgress(40);
    const wasmBytes = await response.arrayBuffer();
    debugLog(`WASM file loaded: ${wasmBytes.byteLength} bytes`, 'info');

    // Step 4: Use @wasmer/sdk for WASI compatibility
    updateProgress(50);
    let wasmerInstance: any = null;
    try {
      // Use @wasmer/sdk to get a proper WASI instance if possible
      // Note: The exact API might vary, this is a basic approach
      const pkg = await Wasmer.fromRegistry("registry.wapm.io/python/python");
      wasmerInstance = pkg;
      debugLog('Wasmer SDK instance created successfully', 'info');
    } catch (err) {
      debugLog(`Wasmer SDK instance creation failed (will use direct WebAssembly): ${err}`, 'warn');
    }

    // Step 5: Compile the WASM module directly
    updateProgress(60);
    const module = await WebAssembly.compile(wasmBytes);
    debugLog('WASM module compiled', 'info');

    // Step 6: Create basic WASI imports for direct WebAssembly instantiation
    updateProgress(70);
    const wasiImports = {
      wasi_snapshot_preview1: {
        // Basic WASI functions that Go WASI runtime might call
        fd_write: (fd: number, iovs: number, iovs_len: number, nwritten: number) => {
          debugLog(`WASI fd_write called: fd=${fd}, iovs=${iovs}, len=${iovs_len}`, 'info');
          return 0; // Success
        },
        fd_close: (fd: number) => {
          debugLog(`WASI fd_close called: fd=${fd}`, 'info');
          return 0;
        },
        fd_seek: (fd: number, offset: bigint, whence: number, newoffset: number) => {
          debugLog(`WASI fd_seek called: fd=${fd}, offset=${offset}`, 'info');
          return 0;
        },
        proc_exit: (code: number) => {
          debugLog(`WASI proc_exit called with code: ${code}`, 'info');
          // Don't actually exit in browser
        },
        environ_sizes_get: (environc: number, environ_buf_size: number) => {
          debugLog('WASI environ_sizes_get called', 'info');
          return 0;
        },
        environ_get: (environ: number, environ_buf: number) => {
          debugLog('WASI environ_get called', 'info');
          return 0;
        },
        args_sizes_get: (argc: number, argv_buf_size: number) => {
          debugLog('WASI args_sizes_get called', 'info');
          return 0;
        },
        args_get: (argv: number, argv_buf: number) => {
          debugLog('WASI args_get called', 'info');
          return 0;
        },
        random_get: (buf: number, buf_len: number) => {
          debugLog(`WASI random_get called: buf=${buf}, len=${buf_len}`, 'info');
          return 0;
        },
        clock_time_get: (id: number, precision: bigint, time: number) => {
          debugLog(`WASI clock_time_get called: id=${id}`, 'info');
          return 0;
        },
      }
    };

    // Step 7: Instantiate the module with WASI imports
    updateProgress(80);
    const instance = await WebAssembly.instantiate(module, wasiImports);
    debugLog('WASM instance created with WASI imports', 'info');

    // Step 8: Extract memory and exports
    updateProgress(90);
    const memory = instance.exports.memory as WebAssembly.Memory | null;
    const exports = instance.exports;

    if (!memory) {
      debugLog('Warning: No memory export found in WASM module', 'warn');
    }

    debugLog(`WASI WASM loaded successfully with exports: ${Object.keys(exports).join(', ')}`, 'info');

    // Step 9: Store the complete module
    wasiLoaderState.wasiModule = {
      instance,
      exports,
      memory,
      wasmerInstance
    };

    updateProgress(100);
    wasiLoaderState.isLoading = false;

    return true;
  } catch (err) {
    const msg = String(err);

    // Update error state
    wasiLoaderState.error = msg;
    wasiLoaderState.isLoading = false;
    wasiLoaderState.progress = 0;
    wasiLoaderState.wasiModule = null;

    captureError(err instanceof Error ? err : new Error(msg), 'WASI-Loader');
    debugLog(`WASI WASM load failed: ${msg}`, 'error');

    return false;
  }
}

/**
 * Get a specific export from the WASI module
 */
export function getWasiExport(name: string): any {
  if (!wasiLoaderState.wasiModule) {
    throw new Error('WASI module not loaded');
  }
  return wasiLoaderState.wasiModule.exports[name];
}

/**
 * Call a WASI exported function
 */
export function callWasiFunction(name: string, ...args: any[]): any {
  const func = getWasiExport(name);
  if (typeof func !== 'function') {
    throw new Error(`Export '${name}' is not a function`);
  }
  try {
    debugLog(`Calling WASI function: ${name}(${args.map(a => typeof a === 'string' ? `"${a}"` : a).join(', ')})`, 'info');
    return func(...args);
  } catch (err) {
    const msg = `Error calling WASI function '${name}': ${err}`;
    debugLog(msg, 'error');
    throw new Error(msg);
  }
}

/**
 * Read memory from the WASI module
 */
export function readWasiMemory(offset: number, length: number): Uint8Array {
  if (!wasiLoaderState.wasiModule?.memory) {
    throw new Error('WASI module memory not available');
  }
  const buffer = new Uint8Array(wasiLoaderState.wasiModule.memory.buffer);
  return buffer.slice(offset, offset + length);
}

/**
 * Read a string from WASI memory at the given pointer
 */
export function readWasiString(ptr: number, length?: number): string {
  if (!wasiLoaderState.wasiModule?.memory) {
    throw new Error('WASI module memory not available');
  }

  const buffer = new Uint8Array(wasiLoaderState.wasiModule.memory.buffer);
  
  if (length !== undefined) {
    // Read fixed length
    const bytes = buffer.slice(ptr, ptr + length);
    return new TextDecoder('utf-8').decode(bytes);
  } else {
    // Read until null terminator
    let end = ptr;
    while (end < buffer.length && buffer[end] !== 0) {
      end++;
    }
    const bytes = buffer.slice(ptr, end);
    return new TextDecoder('utf-8').decode(bytes);
  }
}

/**
 * Write memory to the WASI module
 */
export function writeWasiMemory(offset: number, data: Uint8Array): void {
  if (!wasiLoaderState.wasiModule?.memory) {
    throw new Error('WASI module memory not available');
  }
  const buffer = new Uint8Array(wasiLoaderState.wasiModule.memory.buffer);
  buffer.set(data, offset);
}

/**
 * Write a string to WASI memory
 */
export function writeWasiString(str: string, ptr: number): number {
  if (!wasiLoaderState.wasiModule?.memory) {
    throw new Error('WASI module memory not available');
  }

  const buffer = new Uint8Array(wasiLoaderState.wasiModule.memory.buffer);
  const encoder = new TextEncoder();
  const encoded = encoder.encode(str);
  
  // Check bounds
  if (ptr + encoded.length > buffer.length) {
    throw new Error(`String too long for memory bounds: ${encoded.length} bytes at offset ${ptr}`);
  }

  // Write the string
  buffer.set(encoded, ptr);
  return encoded.length;
}

/**
 * Reset the WASI loader state
 */
export function resetWasiLoader(): void {
  wasiLoaderState.url = '';
  wasiLoaderState.isLoading = false;
  wasiLoaderState.progress = 0;
  wasiLoaderState.error = null;
  wasiLoaderState.wasiModule = null;
  wasiLoaderState.progressHistory = [];
}
